#include<iostream>
#include<string>
using namespace std;
class CPU
{
public:
	virtual void calculate() = 0;
};
class VideoCard
{
public:
	virtual void display() = 0;
};
class Memeory
{
public:
	virtual void storage() = 0;
};
class Computer
{
public:
	Computer(CPU* cpu, VideoCard* vc, Memeory* mem)
	{
		m_cpu = cpu;
		m_vc = vc;
		m_mem = mem;
	}
	void work()
	{
		m_cpu->calculate();
		m_vc->display();
		m_mem->storage();
	}
	~Computer()
	{
		if (m_cpu != NULL)
		{
			delete m_cpu;
			m_cpu = NULL;
		}
		if (m_vc != NULL)
		{
			delete m_vc;
			m_vc = NULL;
		}
		if (m_cpu != NULL)
		{
			delete m_mem;
			m_mem = NULL;
		}
	}

private:
	CPU* m_cpu;
	VideoCard* m_vc;
	Memeory* m_mem;
};
//
//
//
class IntelCPU :public CPU
{
public:
	virtual void calculate()
	{
		cout << "inter cpu work" << endl;
	}
};
class InterVideoCard :public VideoCard
{
public:
	virtual void display()
	{
		cout << "inter video work" << endl;
	}
};
class InterMemory :public Memeory
{
public:
	virtual void storage()
	{
		cout << "inter mem work" << endl;
	}
};
class LenovoCPU :public CPU
{
public:
	virtual void calculate()
	{
		cout << "Lenovo cpu work" << endl;
	}
};
class LenovoVideoCard :public VideoCard
{
public:
	virtual void display()
	{
		cout << "Lenovo video work" << endl;
	}
};
class LenovoMemory :public Memeory
{
public:
	virtual void storage()
	{
		cout << "Lenovo mem work" << endl;
	}
};
//
//
//
void test01()//组装电脑
{
	// 1
	CPU* intelcpu = new IntelCPU;
	VideoCard* intelvc = new InterVideoCard;
	Memeory* intelmem = new InterMemory;
	// 01
	Computer* computer1 = new Computer(intelcpu, intelvc, intelmem);
	computer1->work();
	delete computer1;
	//02
	Computer* computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);
	computer2->work();
	delete computer2;
}
int main()
{

	test01();
	system("pause");
	return 0;
}
