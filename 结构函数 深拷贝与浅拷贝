#include<iostream>
using namespace std;

//深拷贝与浅拷贝

//浅拷贝：简单赋值拷贝操作

//深拷贝：在堆区重新申请空间进行拷贝操作

class Person
{
public:
	Person()
	{
		cout << "无参构造函数" << endl;
	}
	Person(int age, int height)
	{
		m_height = new int (height);
		cout << "有参构造函数" << endl;
		m_age = age;
	}
	//解决浅拷贝的问题
	Person(const Person& p)
	{
		cout << "拷贝构造函数" << endl;
		m_age = p.m_age;
		//m_height = p.m_height 编译器自动帮写的
		//深拷贝操作,重新创建堆区，防止析构重复释放指针指向的堆区
		m_height = new int(*p.m_height);
	}
	~Person()
	{
		//析构代码，将堆区数据释放
		if (m_height != NULL)
		{
			delete m_height;
			m_height = NULL;
		}
		cout << "析构函数" << endl;
	}
	int m_age;
	int* m_height;

};
void test01()
{
	Person p1(18,160);
	cout << "p1.age = " << p1.m_age <<" hight = "<<*p1.m_height<< endl;
	Person p2(p1);
	cout << "p2.age = " << p2.m_age <<" hight = "<<*p2.m_height<< endl;
}
int main()
{
	test01();


	system("pause");
	return 0;
}
