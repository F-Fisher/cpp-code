#include<iostream>
#include<string>
using namespace std;
//普通写法
class Calculator
{
public:
	int getResult(string oper)
	{
		if (oper == "+")
		{
			return m_Num1 + m_Num2;
		}
		else if (oper == "-")
		{
			return m_Num1 - m_Num2;
		}
		else if (oper == "*")
		{
			return m_Num1 * m_Num2;
		}
		//如果想扩展，需要重写源码
		//在真实开发中 提倡 开闭原则 对扩展开放，对修改关闭
	}
	int m_Num1;
	int m_Num2;

};
void test01()
{
	Calculator c;
	c.m_Num1 = 2;
	c.m_Num2 = 4;
	cout << c.m_Num1 << "+" << c.m_Num2 << "=" << c.getResult("+") << endl;
	cout << c.m_Num1 << "-" << c.m_Num2 << "=" << c.getResult("-") << endl;
	cout << c.m_Num1 << "*" << c.m_Num2 << "=" << c.getResult("*") << endl;

}
//利用多态
//利用计算机的抽象类
class AbstractCalculator
{
public:
	virtual int getResult()
	{
		return 0;
	}
	int m_Num1;
	int m_Num2;
};
class Add:public AbstractCalculator
{
public:
	int getResult()
	{
		return m_Num1 + m_Num2;
	}
};
class Sub :public AbstractCalculator
{
public:
	int getResult()
	{
		return m_Num1 - m_Num2;
	}
};
class Mul :public AbstractCalculator
{
public:
	int getResult()
	{
		return m_Num1 * m_Num2;
	}
};
void test02()
{
	//多态使用条件
	//父类指针指或引用指向子类对象
	//多态好处
	// 1 组织清晰
	// 2 可读性强
	// 3 对于后期扩展和维护性高
	// 
	//加法
	AbstractCalculator* abc = new Add;
	abc->m_Num1 = 10;
	abc->m_Num2 = 3;
	cout << abc->m_Num1 << "+" << abc->m_Num2 << "=" << abc->getResult() << endl;
	delete abc;
	//减法
    abc = new Sub;
	abc->m_Num1 = 10;
	abc->m_Num2 = 3;
	cout << abc->m_Num1 << "-" << abc->m_Num2 << "=" << abc->getResult() << endl;
	delete abc;
	//乘法
	abc = new Mul;
	abc->m_Num1 = 10;
	abc->m_Num2 = 3;
	cout << abc->m_Num1 << "*" << abc->m_Num2 << "=" << abc->getResult() << endl;
	delete abc;
}
int main()
{
	test01();
	test02();
	system("pause");
	return 0;
}
